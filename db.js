let db=[
{
	"name":"Decorator",
	"description":"Упаковывает обьект для реализации нового поведения"
},
{
	"name":"State",
	"description":"Инкапсулирует поведения, связанное с состоянием, с делегированием поведения обьекту текущего состояния"
},
{
	"name":"Iterator",
	"description":"Обеспечивает механизм перебора коллекции оьтектов без раскрытия реализации"
},
{
	"name":"Facade",
	"description":"Упрощает интерфейс группы классов"
},
{
	"name":"Strategy",
	"description":"Инкапсулирует взаимозаменяемые варианты поведения и выбирает один из них посредством делегирования"
},
{
	"name":"Proxy",
	"description":"Упаковывает обьект для управления доступа к нему"
},
{
	"name":"Factory Method",
	"description":"Субклассы решают какие конкретные классы должны создаваться"
},
{
	"name":"Adapter",
	"description":"Упаковывает обьект и предоставляет другой интерфейс к нему"
},
{
	"name":"Observer",
	"description":"Обеспечивает оповещение обьектов об изменении состояния"
},
{
	"name":"Template Method",
	"description":"Субклассы решают, как реализовать шаги в алгоритме"
},
{
	"name":"Composite",
	"description":"Клиент выполняет однородные операции с обьектами и коллекциями"
},
{
	"name":"Singleton",
	"description":"Обеспечивает создание одного и только одного экземпляра"
},
{
	"name":"Abstract Factory",
	"description":"Позволяет клиенту создавать семейства обьектов без указания их конкретных классов"
},
{
	"name":"Command",
	"description":"Инкапсулирует запрос в виде обьекта"
}
];
